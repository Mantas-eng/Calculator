{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuid","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49764a89.chunk.js","sourcesContent":["import React from \"react\";\nimport { MdEdit, MdDelete } from \"react-icons/md\";\nconst ExpenseItem = ({ expense, handleEdit, handleDelete }) => {\n  const { id, charge, amount } = expense;\n  return (\n    <li className=\"item\">\n      <div className=\"info\">\n        <span className=\"expense\">{charge}</span>\n        <span className=\"amount\">${amount}</span>\n      </div>\n      <div>\n        <button\n          className=\"edit-btn\"\n          aria-label=\"edit button\"\n          onClick={() => handleEdit(id)}\n        >\n          <MdEdit />\n        </button>\n        <button\n          className=\"clear-btn\"\n          aria-label=\"delete button\"\n          onClick={() => handleDelete(id)}\n        >\n          <MdDelete />\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default ExpenseItem;\n","import React from \"react\";\nimport Item from \"./ExpenseItem\";\nimport { MdDelete } from \"react-icons/md\";\nconst ExpenseList = ({ expenses, handleEdit, handleDelete, clearItems }) => {\n  return (\n    <>\n      <ul className=\"list\">\n        {expenses.map(expense => {\n          return (\n            <Item\n              key={expense.id}\n              expense={expense}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n            />\n          );\n        })}\n      </ul>\n      {expenses.length > 0 && (\n        <button className=\"btn\" onClick={clearItems}>\n          clear expenses\n          <MdDelete className=\"btn-icon\" />\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default ExpenseList;\n","import React from \"react\";\nimport { MdSend } from \"react-icons/md\";\nconst ExpenseForm = ({\n  charge,\n  amount,\n  handleCharge,\n  handleAmount,\n  handleSubmit,\n  edit\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-center\">\n        <div className=\"form-group\">\n          <label htmlFor=\"charge\">charge</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"charge\"\n            name=\"charge\"\n            placeholder=\"e.g. rent\"\n            value={charge}\n            onChange={handleCharge}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">amount</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id=\"amount\"\n            name=\"amount\"\n            placeholder=\"e.g. 100\"\n            value={amount}\n            onChange={handleAmount}\n          />\n        </div>\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        {edit ? \"edit\" : \"submit\"}\n        <MdSend className=\"btn-icon\" />\n      </button>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n","import React from \"react\";\n\nconst Alert = ({ type, text }) => {\n  return <div className={`alert alert-${type}`}>{text}</div>;\n};\n\nexport default Alert;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ExpenseList from \"./components/ExpenseList\";\nimport ExpenseForm from \"./components/ExpenseForm\";\nimport Alert from \"./components/Alert\";\nimport uuid from \"uuid/v4\";\n\n//useEffect let's perform side effects\n// runs after every render\n// first paramater -  callback function (runs after render)\n// second paramater - array - for letting react know when to run useEffect.\n// react re-renders when state has changed or props\n\nconst initialExpenses = localStorage.getItem(\"expenses\")\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\nfunction App() {\n  // ************* state values *******************\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses);\n  // single expense\n  const [charge, setCharge] = useState(\"\");\n  // single amount\n  const [amount, setAmount] = useState(\"\");\n  // alert\n  const [alert, setAlert] = useState({ show: false });\n  // edit\n  const [edit, setEdit] = useState(false);\n  // edit item\n  const [id, setId] = useState(0);\n  // ************* useEffect *******************\n  useEffect(() => {\n    console.log(\"we called useEffect\");\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n  // ************* functionality *******************\n  // handle charge\n\n  const handleCharge = e => {\n    setCharge(e.target.value);\n  };\n  // handle amount\n\n  const handleAmount = e => {\n    setAmount(e.target.value);\n  };\n  // handle alert\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 3000);\n  };\n\n  // handle submit\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (charge !== \"\" && amount > 0) {\n      if (edit) {\n        let tempExpenses = expenses.map(item => {\n          return item.id === id ? { ...item, charge, amount } : item;\n        });\n        setExpenses(tempExpenses);\n        setEdit(false);\n        handleAlert({ type: \"success\", text: \"item edited\" });\n      } else {\n        const singleExpense = { id: uuid(), charge, amount };\n        setExpenses([...expenses, singleExpense]);\n        handleAlert({ type: \"success\", text: \"item added\" });\n      }\n      setCharge(\"\");\n      setAmount(\"\");\n    } else {\n      // handle alert called\n      handleAlert({\n        type: \"danger\",\n        text: `charge can't be empty value and amount value has to be bigger than zero`\n      });\n    }\n  };\n  // clear all items\n  const clearItems = () => {\n    setExpenses([]);\n    handleAlert({ type: \"danger\", text: \"all items deleted\" });\n  };\n  // handle delete\n  const handleDelete = id => {\n    let tempExpenses = expenses.filter(item => item.id !== id);\n    setExpenses(tempExpenses);\n    handleAlert({ type: \"danger\", text: \"item deleted\" });\n  };\n  // handle edit\n  const handleEdit = id => {\n    let expense = expenses.find(item => item.id === id);\n    let { charge, amount } = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <Alert />\n      <h1>budget calculator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          charge={charge}\n          amount={amount}\n          handleAmount={handleAmount}\n          handleCharge={handleCharge}\n          handleSubmit={handleSubmit}\n          edit={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          clearItems={clearItems}\n        />\n      </main>\n      <h1>\n        total spending :{\" \"}\n        <span className=\"total\">\n          $\n          {expenses.reduce((acc, curr) => {\n            return (acc += parseInt(curr.amount));\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}